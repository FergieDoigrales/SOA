openapi: 3.0.0
info:
  title: Organization Management API
  description: |
    ## 1st service
    - CRUD operations for Organizations
    - sorting, filtering, and pagination for collections
    - delete by address, group by name, count by address
    ## 2nd service
    - `/orgdirectory`
    - additional filtering and ordering operations
  version: 1.0.0
servers:
  - url: http://localhost:8081
    description: Development server

components:
  schemas:
    Coordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
          format: double
          example: 12.34
        y:
          type: number
          format: float
          example: 5.6

    Address:
      type: object
      required:
        - street
      properties:
        street:
          type: string
          example: "Main St."
          description: Поле не может быть null

    OrganizationType:
      type: string
      enum:
        - COMMERCIAL
        - GOVERNMENT
        - TRUST
        - PRIVATE_LIMITED_COMPANY
        - OPEN_JOINT_STOCK_COMPANY

    OrganizationRequest:
      type: object
      required:
        - name
        - coordinates
        - fullName
        - postalAddress
      properties:
        name:
          type: string
          example: "Fergoeqs Corp"
          description: Поле не может быть null, Строка не может быть пустой
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        annualTurnover:
          type: integer
          minimum: 1
          nullable: true
          example: 1000000
          description: Значение поля должно быть больше 0
        fullName:
          type: string
          example: "Fergoeqs Corporation Incorporated"
          description: Значение этого поля должно быть уникальным, Поле не может быть null
        type:
          $ref: '#/components/schemas/OrganizationType'
        postalAddress:
          $ref: '#/components/schemas/Address'

    OrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/OrganizationRequest'
        - type: object
          required:
            - id
            - creationDate
          properties:
            id:
              type: integer
              format: int64
              minimum: 1
              example: 1
              description: Значение поля должно быть больше 0, Уникальное, Генерируется автоматически
            creationDate:
              type: string
              format: date-time
              example: "2023-10-25T12:00:00Z"
              description: Поле не может быть null, Генерируется автоматически

    OrganizationResponseWithLocation:
      allOf:
        - $ref: '#/components/schemas/OrganizationResponse'
        - type: object
          properties:
            location:
              type: string
              format: uri
              example: "http://localhost:8080/organizations/1"

    SortOption:
      type: object
      properties:
        field:
          type: string
          enum: [id, name, coordinates.x, coordinates.y, creationDate, annualTurnover, fullName, type, postalAddress.street]
        direction:
          type: string
          enum: [asc, desc]
          default: asc
        priority:
          type: integer
          minimum: 1
          description: |
            Приоритет сортировки (чем меньше число, тем выше приоритет).
            Если не указан, используется порядок в массиве.

    FilterCondition:
      type: object
      properties:
        field:
          type: string
        operator:
          type: string
          enum: [eq, ne, gt, gte, lt, lte, like, in, between]
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array

    FilterRequest:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterCondition'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortOption'
        page:
          type: integer
          minimum: 0
          default: 0
        size:
          type: integer
          minimum: 1
          maximum: 100
          default: 20

    PaginatedResponse:
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponse'
        totalPages:
          type: integer
        totalElements:
          type: integer
        page:
          type: integer
        size:
          type: integer

  parameters:
    IdPath:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      description: Unique organization identifier

paths:
  /organizations/search:
    post:
      tags:
        - Organizations
      summary: Get a paginated and filtered list of organizations
      description: |
        Returns a list of organizations. Supports complex filtering by any combination of fields with various operators,
        multiple sorting criteria with priority, and pagination. All parameters are passed in request body.
        
        **Available fields for filtering:**
        - id (integer)
        - name (string)
        - coordinates.x (number)
        - coordinates.y (number)
        - creationDate (date-time)
        - annualTurnover (integer)
        - fullName (string)
        - type (OrganizationType: COMMERCIAL, GOVERNMENT, TRUST, PRIVATE_LIMITED_COMPANY, OPEN_JOINT_STOCK_COMPANY)
        - postalAddress.street (string)
        
        **Available operators:**
        - eq (equals)
        - ne (not equals)
        - gt (greater than)
        - gte (greater than or equal)
        - lt (less than)
        - lte (less than or equal)
        - like (string pattern matching)
        - in (in a list of values)
        - between (between two values, inclusive)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest'
            examples:
              complexFilter:
                summary: Complex filtering with multiple criteria and priority sorting
                value:
                  filters:
                    - field: annualTurnover
                      operator: gt
                      value: 1000000
                    - field: type
                      operator: eq
                      value: COMMERCIAL
                    - field: coordinates.x
                      operator: between
                      value: [10, 20]
                  sort:
                    - field: coordinates.x
                      direction: asc
                      priority: 1
                    - field: coordinates.y
                      direction: desc
                      priority: 2
                  page: 0
                  size: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          description: Bad Request - Invalid filter/sort/pagination parameters

  /organizations:
    post:
      tags:
        - Organizations
      summary: Create a new organization
      description: |
        Creates a new organization. The `id` and `creationDate` are generated automatically and must not be provided.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponseWithLocation'
        '400':
          description: |
            Bad Request - Invalid input data (e.g., null name, invalid turnover)
        '409':
          description: |
            Conflict - Violation of uniqueness (e.g., duplicate fullName)

  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Get an organization by ID
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Not Found - Organization with the given ID was not found

    put:
      tags:
        - Organizations
      summary: Update an existing organization
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Bad Request - Invalid input data
        '404':
          description: Not Found
        '409':
          description: Conflict - Uniqueness violation

    delete:
      tags:
        - Organizations
      summary: Delete an organization by ID
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '204':
          description: No Content - Successfully deleted
        '404':
          description: Not Found

  /organizations/by-address:
    delete:
      tags:
        - Organizations
      summary: Delete one organization by its postal address
      description: |
        Deletes one (any) organization whose postalAddress.street matches the provided value.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                street:
                  type: string
              required:
                - street
      responses:
        '204':
          description: No Content - Successfully deleted one organization
        '404':
          description: Not Found - No organization with the given address was found

  /organizations/group-by-fullname:
    post:
      tags:
        - Organizations
      summary: Group organizations by fullName and count them
      description: |
        Returns a map where the key is the fullName and the value is the count of organizations in that group.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  example: 5

  /organizations/count-by-address:
    post:
      tags:
        - Organizations
      summary: Count organizations with postal address less than given
      description: |
        Returns the count of organizations whose postalAddress.street is lexicographically less than the provided value.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                street:
                  type: string
              required:
                - street
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                example: 3

  /orgdirectory/filter/turnover:
    post:
      tags:
        - OrgDirectory
      summary: Filter organizations by annual turnover range
      description: |
        Filters organizations with annual turnover between min and max values (inclusive).
        Supports additional filtering, sorting and pagination.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                minAnnualTurnover:
                  type: integer
                  minimum: 0
                maxAnnualTurnover:
                  type: integer
                  minimum: 0
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/FilterCondition'

                page:
                  type: integer
                  minimum: 0
                  default: 0
                size:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 20
              required:
                - minAnnualTurnover
                - maxAnnualTurnover
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          description: Bad Request - Invalid parameters (e.g., min > max)

  /orgdirectory/order:
    post:
      tags:
        - OrgDirectory
      summary: Get organizations sorted by specified fields with priority
      description: |
        Returns organizations sorted by the specified fields with priority in ascending or descending order.
        Supports additional filtering and pagination.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sort:
                  type: array
                  items:
                    $ref: '#/components/schemas/SortOption'
                  minItems: 1
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/FilterCondition'
                page:
                  type: integer
                  minimum: 0
                  default: 0
                size:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 20
              required:
                - sort
            examples:
              prioritySort:
                summary: Sorting with priority
                value:
                  sort:
                    - field: coordinates.x
                      direction: asc
                      priority: 1
                    - field: coordinates.y
                      direction: desc
                      priority: 2
                  page: 0
                  size: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          description: Bad Request - Invalid sort parameter